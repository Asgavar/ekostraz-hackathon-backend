# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: ekostraz
#app: your-app-name
#tenant: your-tenant-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.7

# you can overwrite defaults here
#  stage: dev
  region: eu-west-1

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        # - dynamodb:DescribeTable
        - dynamodb:Scan
        # - dynamodb:UpdateItem
        # - dynamodb:DeleteItem
      Resource:
        - Fn::GetAtt:
            - InterventionsTable
            - Arn
        - Fn::GetAtt:
            - InterventionCommentsTable
            - Arn
        - Fn::GetAtt:
            - Attachments
            - Arn

    - Effect: "Allow"
      Action:
        - "s3:PutObject"
        - "s3:GetObject"
      Resource:
        Fn::Join: ['', [Fn::GetAtt: [ AttachmentsBucket, Arn ], '/*'] ]

# you can define service wide environment variables here
#  environment:
#    variable1: value1

package:
  include:
    - common.py

functions:
  interventionsPost:
    handler: interventions_post.handler
    events:
      - http:
          path: interventions
          method: post
          cors: true

  interventionsGet:
    handler: interventions_get.handler
    events:
      - http:
          path: interventions/{id}
          method: get

  commentsPost:
    handler: comments_post.handler
    events:
      - http:
          path: comments/{interventionId}
          method: post
          cors: true

  fileUrlGet:
    handler: attachments_get_url.handler
    events:
      - http:
          path: generateUploadUrl/{FileName}
          method: get

  attachmentsPost:
    handler: attachments_post.handler
    events:
      - http:
          path: attachments/
          method: post

  attachmentsGet:
    handler: attachments_get.handler
    events:
      - http:
          path: attachments/{interventionID}
          method: get

  generateGeoCoordinates:
    handler: calculate_geo_coordinates.handler
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - InterventionsTable
              - StreamArn

#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    InterventionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: interventions
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_IMAGE
    InterventionCommentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: comments
        AttributeDefinitions:
          - AttributeName: interventionId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: N
        KeySchema:
          - AttributeName: interventionId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    Attachments:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: attachments
        AttributeDefinitions:
          - AttributeName: interventionId
            AttributeType: S
          - AttributeName: attachmentUrl
            AttributeType: S
        KeySchema:
          - AttributeName: interventionId
            KeyType: HASH
          - AttributeName: attachmentUrl
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ekostraz-attachments3
    AttachmentsBucketPolicy:
      Type: 'AWS::S3::BucketPolicy'
      Properties:
        PolicyDocument:
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action:
                - 's3:GetObject'
              Resource:
                Fn::Join:
                  - ""
                  -
                    - "arn:aws:s3:::"
                    - Ref:
                        AttachmentsBucket
                    - "/*"
        Bucket:
          Ref: AttachmentsBucket
